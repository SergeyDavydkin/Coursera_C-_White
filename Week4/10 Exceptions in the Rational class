//*************************************************************************************
//*************************************************************************************
/*
Задание по программированию: Исключения в классе Rational
Вспомним класс Rational, который мы реализовали в задачах, посвящённых перегрузке 
операторов. Там специально говорилось, что в тестах объекты класса Rational никогда 
не создаются с нулевым знаменателем и никогда не выполняется деление на ноль. 
Настало время избавиться от этого ограничения и научиться обрабатывать нулевой знаменатель 
и деление на ноль. В этой задаче вам предстоит это сделать.

Поменяйте реализацию конструктора класса Rational так, чтобы он выбрасывал исключение 
invalid_argument, если знаменатель равен нулю. Кроме того, переделайте реализацию 
оператора деления для класса Rational так, чтобы он выбрасывал исключение 
domain_error, если делитель равен нулю.

Напомним, что вам надо реализовать интерфейс

class Rational {
public:
  Rational();
  Rational(int numerator, int denominator);

  int Numerator() const;
  int Denominator() const;
};
и оператор деления для класса Rational

Rational operator / (const Rational & lhs, const Rational & rhs);
Так же, как и в задачах на перегрузку операторов, вам будет предложен файл с заготовкой 
кода. Функция main в этом файле содержит ряд юнит-тестов, которые позволят вам проверить 
свою реализацию. При проверке вашего решения оно будет тестироваться на более 
полном наборе тестов, так что успешное прохождение всех юнит-тестов не гарантирует, 
что ваша реализация будет зачтена.

Шаблон программы: rational_throw.cpp

*/
//*************************************************************************************
//*************************************************************************************

#include <iostream>
#include <exception>

using namespace std;

class Rational {
public:
	Rational()
		: numerator_(0)
		, denominator_(1)
	{
		// Реализуйте конструктор по умолчанию		
	}

	Rational(int numerator, int denominator) {
		if (denominator == 0) {
			// бросаем исключение в случае нулевого знаменателя
			throw invalid_argument("denominator == 0");
		}
		// Реализуйте конструктор
		const int gcd_result = gcd(numerator, denominator);

		// сократим дробь, разделив числитель и знаменатель на их НОД
		numerator_ = numerator / gcd_result;
		denominator_ = denominator / gcd_result;

		// знаменатель должен быть положительным
		if (denominator_ < 0) {
			numerator_ = -numerator_;
			denominator_ = -denominator_;
		}
	}

	int Numerator() const {
		return numerator_;
	}

	int Denominator() const	{
		return denominator_;
	}

	// вычисления наибольшего общего делителя (НОД)
	int gcd(int a, int b) {
		return b ? gcd(b, a % b) : a;
	}		

private:
	// Добавьте поля
	int numerator_;
	int denominator_;
};

// Вставьте сюда реализацию operator == для класса Rational из второй части
// 
// поскольку дроби сокращены, достаточно сравнить числители и знаменатели
bool operator ==(const Rational& lhs, const Rational& rhs) {
	return lhs.Numerator() == rhs.Numerator()
		&& lhs.Denominator() == rhs.Denominator();
}

// используем обычную формулу сложения дробей, основанную на приведении слагаемых 
// к общему знаменателю
Rational operator +(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() + rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// вычитание реализуется аналогично сложению
Rational operator -(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() - rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// Реализуйте для класса Rational операторы * и /

// реализация умножения
Rational operator *(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Numerator(),
		lhs.Denominator() * rhs.Denominator() };
}

// реализация деления
Rational operator /(const Rational& lhs, const Rational& rhs) {
	if (rhs.Numerator() == 0) {
		// проверяем делитель на 0 (что равносильно проверке на 0 его числителя)
		throw domain_error("rhs.Denominator() == 0");
	}
	return lhs * Rational(rhs.Denominator(), rhs.Numerator());
}


// Реализуйте для класса Rational операторы << и >>
ostream& operator <<(ostream& os, const Rational& rat) {
	return os << rat.Numerator() << '/' << rat.Denominator();
}

istream& operator >>(istream& is, Rational& rat) {
	int num = 0;
	int den = 0;
	if (is >> num && is.ignore(1) && is >> den) {
		rat = Rational(num, den);
	}
	return is;
}

// Реализуйте для класса Rational оператор(ы), необходимые для использования его
// в качестве ключа map'а и элемента set'а
// чтобы сравнить lhs с rhs, сравним их разность с нулём, что равносильно 
// сравнению с нулём числителя
bool operator <(const Rational& lhs, const Rational& rhs) {
	return (lhs - rhs).Numerator() < 0;
}

int main() {
	
	try	{
		Rational r(1, 0);
		cout << "Doesn't throw in case of zero denominator" << endl;
		return 1;
	}
	catch (invalid_argument&)	{

	}

	try	{
		auto x = Rational(1, 2) / Rational(0, 1);
		cout << "Doesn't throw in case of division by zero" << endl;
		return 2;
	}
	catch (domain_error&)	{

	}

	cout << "OK" << endl;

	return 0;
}
