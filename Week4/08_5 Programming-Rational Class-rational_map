#include <iostream>
#include <map>
#include <set>
#include <vector>

using namespace std;

class Rational {
public:
	Rational()
		: numerator_(0)
		, denominator_(1)
	{
		// Реализуйте конструктор по умолчанию		
	}

	Rational(int numerator, int denominator) {
		// Реализуйте конструктор
		const int gcd_result = gcd(numerator, denominator);

		// сократим дробь, разделив числитель и знаменатель на их НОД
		numerator_ = numerator / gcd_result;
		denominator_ = denominator / gcd_result;

		// знаменатель должен быть положительным
		if (denominator_ < 0) {
			numerator_ = -numerator_;
			denominator_ = -denominator_;
		}
	}

	int Numerator() const {
		return numerator_;
	}

	int Denominator() const	{
		return denominator_;
	}

	// вычисления наибольшего общего делителя (НОД)
	int gcd(int a, int b) {
		return b ? gcd(b, a % b) : a;
	}		

private:
	// Добавьте поля
	int numerator_;
	int denominator_;
};

// Вставьте сюда реализацию operator == для класса Rational из второй части
// 
// поскольку дроби сокращены, достаточно сравнить числители и знаменатели
bool operator ==(const Rational& lhs, const Rational& rhs) {
	return lhs.Numerator() == rhs.Numerator()
		&& lhs.Denominator() == rhs.Denominator();
}

// используем обычную формулу сложения дробей, основанную на приведении слагаемых 
// к общему знаменателю
Rational operator +(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() + rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// вычитание реализуется аналогично сложению
Rational operator -(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() - rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// Реализуйте для класса Rational операторы * и /

// реализация умножения
Rational operator *(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Numerator(),
		lhs.Denominator() * rhs.Denominator() };
}

// реализация деления
Rational operator /(const Rational& lhs, const Rational& rhs) {	
	return lhs * Rational(rhs.Denominator(), rhs.Numerator());
}


// Реализуйте для класса Rational операторы << и >>
ostream& operator <<(ostream& os, const Rational& rat) {
	return os << rat.Numerator() << '/' << rat.Denominator();
}

istream& operator >>(istream& is, Rational& rat) {
	int num = 0;
	int den = 0;
	if (is >> num && is.ignore(1) && is >> den) {
		rat = Rational(num, den);
	}
	return is;
}

// Реализуйте для класса Rational оператор(ы), необходимые для использования его
// в качестве ключа map'а и элемента set'а
// чтобы сравнить lhs с rhs, сравним их разность с нулём, что равносильно 
// сравнению с нулём числителя
bool operator <(const Rational& lhs, const Rational& rhs) {
	return (lhs - rhs).Numerator() < 0;
}

int main()
{
	{
		const set<Rational> rs = { {1, 2}, {1, 25}, {3, 4}, {3, 4}, {1, 2} };
		if (rs.size() != 3)
		{
			cout << "Wrong amount of items in the set" << endl;
			return 1;
		}

		vector<Rational> v;
		for (auto x : rs)
		{
			v.push_back(x);
		}
		if (v != vector<Rational>{ {1, 25}, { 1, 2 }, { 3, 4 }})
		{
			cout << "Rationals comparison works incorrectly" << endl;
			return 2;
		}
	}

	{
		map<Rational, int> count;
		++count[{1, 2}];
		++count[{1, 2}];

		++count[{2, 3}];

		if (count.size() != 2)
		{
			cout << "Wrong amount of items in the map" << endl;
			return 3;
		}
	}
	cout << "OK" << endl;
	return 0;
}
