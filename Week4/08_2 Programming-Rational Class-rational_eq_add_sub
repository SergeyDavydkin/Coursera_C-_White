#include <iostream>

using namespace std;

// Вставьте сюда реализацию класса Rational из первой части
class Rational
{
public:
	Rational()
		: numerator_(0)
		, denominator_(1)
	{
		// Реализуйте конструктор по умолчанию		
	}

	Rational(int numerator, int denominator) {
		// Реализуйте конструктор
		const int gcd_result = gcd(numerator, denominator);

		// сократим дробь, разделив числитель и знаменатель на их НОД
		numerator_ = numerator / gcd_result;
		denominator_ = denominator / gcd_result;

		// знаменатель должен быть положительным
		if (denominator_ < 0) {
			numerator_ = -numerator_;
			denominator_ = -denominator_;
		}
	}

	int Numerator() const {
		return numerator_;
	}

	int Denominator() const	{
		return denominator_;
	}

	// вычисления наибольшего общего делителя (НОД)
	int gcd(int a, int b) {
		return b ? gcd(b, a % b) : a;
	}
		

private:
	// Добавьте поля
	int numerator_;
	int denominator_;
};

// Реализуйте для класса Rational операторы ==, + и -
// 
// поскольку дроби сокращены, достаточно сравнить числители и знаменатели
bool operator ==(const Rational& lhs, const Rational& rhs) {
	return lhs.Numerator() == rhs.Numerator()
		&& lhs.Denominator() == rhs.Denominator();
}

// используем обычную формулу сложения дробей, основанную на приведении слагаемых 
// к общему знаменателю
Rational operator +(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() + rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// вычитание реализуется аналогично сложению
Rational operator -(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() - rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

int main()
{
	{
		Rational r1(4, 6);
		Rational r2(2, 3);
		bool equal = r1 == r2;
		if (!equal)
		{
			cout << "4/6 != 2/3" << endl;
			return 1;
		}
	}

	{
		Rational a(2, 3);
		Rational b(4, 3);
		Rational c = a + b;
		bool equal = c == Rational(2, 1);
		if (!equal)
		{
			cout << "2/3 + 4/3 != 2" << endl;
			return 2;
		}
	}

	{
		Rational a(5, 7);
		Rational b(2, 9);
		Rational c = a - b;
		bool equal = c == Rational(31, 63);
		if (!equal)
		{
			cout << "5/7 - 2/9 != 31/63" << endl;
			return 3;
		}
	}
	cout << "OK" << endl;
	return 0;
}
