//*************************************************************************************
//*************************************************************************************
/*
Тренировочное задание по программированию: Калькулятор обыкновенных дробей
Итак, теперь у нас с вами есть полноценный тип для представления обыкновенных дробей: 
класс Rational интегрирован в язык с помощью перегрузки операторов и не позволяет 
выполнять некорректные операции за счёт выбрасывания исключений. Давайте на основе 
класса Rational создадим простой калькулятор для обыкновенных дробей.

Вам надо написать программу, которая считывает из стандартного ввода одну строку в формате 
ДРОБЬ_1 операция ДРОБЬ_2. ДРОБЬ_1 и ДРОБЬ_2 имеют формат X/Y, где X — целое, 
а Y — целое неотрицательное число. операция — это один из символов '+', '-', '', '/'*. 
Если ДРОБЬ_1 или ДРОБЬ_2 является некорректной обыкновенной дробью, ваша программа должна 
вывести в стандартный вывод сообщение "Invalid argument". Если считанная операция — 
это деление на ноль, выведите в стандартный вывод сообщение "Division by zero". 
В противном случае выведите результат операции.

Пример
stdin	stdout
1/2 + 1/3	5/6
1/2 + 5/0	Invalid argument
4/5 / 0/8	Division by zero

*/
//*************************************************************************************
//*************************************************************************************

#include <iostream>
#include <exception>

using namespace std;

class Rational {
public:
	Rational()
		: numerator_(0)
		, denominator_(1)
	{
		// Реализуйте конструктор по умолчанию		
	}

	Rational(int numerator, int denominator) {
		if (denominator == 0) {
			// бросаем исключение в случае нулевого знаменателя
			throw invalid_argument("Invalid argument");
		}
		// Реализуйте конструктор
		const int gcd_result = gcd(numerator, denominator);

		// сократим дробь, разделив числитель и знаменатель на их НОД
		numerator_ = numerator / gcd_result;
		denominator_ = denominator / gcd_result;

		// знаменатель должен быть положительным
		if (denominator_ < 0) {
			numerator_ = -numerator_;
			denominator_ = -denominator_;
		}
	}

	int Numerator() const {
		return numerator_;
	}

	int Denominator() const	{
		return denominator_;
	}

	// вычисления наибольшего общего делителя (НОД)
	int gcd(int a, int b) {
		return b ? gcd(b, a % b) : a;
	}		

private:
	// Добавьте поля
	int numerator_;
	int denominator_;
};

// Вставьте сюда реализацию operator == для класса Rational из второй части
// 
// поскольку дроби сокращены, достаточно сравнить числители и знаменатели
bool operator ==(const Rational& lhs, const Rational& rhs) {
	return lhs.Numerator() == rhs.Numerator()
		&& lhs.Denominator() == rhs.Denominator();
}

// используем обычную формулу сложения дробей, основанную на приведении слагаемых 
// к общему знаменателю
Rational operator +(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() + rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// вычитание реализуется аналогично сложению
Rational operator -(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Denominator() - rhs.Numerator() * lhs.Denominator(),
		lhs.Denominator() * rhs.Denominator() };
}

// Реализуйте для класса Rational операторы * и /

// реализация умножения
Rational operator *(const Rational& lhs, const Rational& rhs) {
	return { lhs.Numerator() * rhs.Numerator(),
		lhs.Denominator() * rhs.Denominator() };
}

// реализация деления
Rational operator /(const Rational& lhs, const Rational& rhs) {
	if (rhs.Numerator() == 0) {
		// проверяем делитель на 0 (что равносильно проверке на 0 его числителя)
		throw domain_error("Division by zero");
	}
	return lhs * Rational(rhs.Denominator(), rhs.Numerator());
}


// Реализуйте для класса Rational операторы << и >>
ostream& operator <<(ostream& os, const Rational& rat) {
	return os << rat.Numerator() << '/' << rat.Denominator();
}

istream& operator >>(istream& is, Rational& rat) {
	int num = 0;
	int den = 0;
	if (is >> num && is.ignore(1) && is >> den) {
		rat = Rational(num, den);
	}
	return is;
}

// Реализуйте для класса Rational оператор(ы), необходимые для использования его
// в качестве ключа map'а и элемента set'а
// чтобы сравнить lhs с rhs, сравним их разность с нулём, что равносильно 
// сравнению с нулём числителя
bool operator <(const Rational& lhs, const Rational& rhs) {
	return (lhs - rhs).Numerator() < 0;
}

int main() {
	
	Rational rat_1;
	Rational rat_2;

	char operation;

	try {
		cin >> rat_1;
		cin >> operation;
		cin >> rat_2;

		if (operation == '+') {
			cout << rat_1 + rat_2 << endl;
		}
		else if (operation == '-') {
			cout << rat_1 - rat_2 << endl;
		}
		else if (operation == '*') {
			cout << rat_1 * rat_2 << endl;
		}
		else if (operation == '/') {
			try {
				cout << rat_1 / rat_2 << endl;
			}
			catch (domain_error & dom_err) {
				cout << dom_err.what();
			}
		}
	}
	catch (invalid_argument& inv_arg) {
		cout << inv_arg.what();
	}

	return 0;
}
