//*******************************************************************
//*******************************************************************
/*
Задание по программированию: Ежемесячные дела
У каждого из нас есть ежемесячные дела, каждое из которых нужно выполнять 
в конкретный день каждого месяца: оплата счетов за электричество, 
абонентская плата за связь и пр. Вам нужно реализовать работу со списком 
таких дел, а именно, обработку следующих операций:

ADD i s
Добавить дело с названием s в день i.

NEXT
Закончить текущий месяц и начать новый. Если новый месяц имеет больше дней, 
чем текущий, добавленные дни изначально не будут содержать дел. 
Если же в новом месяце меньше дней, дела со всех удаляемых дней необходимо 
будет переместить на последний день нового месяца.
Обратите внимание, что количество команд этого типа может превышать 11.

DUMP i
Вывести все дела в день i.

Изначально текущим месяцем считается январь. Количества дней в месяцах 
соответствуют Григорианскому календарю с той лишь разницей, 
что в феврале всегда 28 дней.

NEXT

Перейти к списку дел на новый месяц. При выполнении данной команды вместо 
текущего (старого) списка дел на текущий месяц создаётся и становится 
активным (новый) список дел на следующий месяц: все дела со старого списка 
дел копируются в новый список. После выполнения данной команды новый список дел 
и следующий месяц становятся текущими, а работа со старым списком дел прекращается. 
При переходе к новому месяцу необходимо обратить внимание на разное количество дней в месяцах:

если следующий месяц имеет больше дней, чем текущий, 
«дополнительные» дни необходимо оставить пустыми (не содержащими дел);

если следующий месяц имеет меньше дней, чем текущий, меньше дней, дела со всех 
«лишних» дней необходимо переместить на последний день следующего месяца.
Замечания
Историю списков дел хранить не требуется, работа ведется только с текущим списком 
дел текущего месяца. Более того, при создании списка дел на следующий месяц, 
он «перетирает» предыдущий список.
Обратите внимание, что количество команд NEXT в общей последовательности команд 
при работе со списком дел может превышать 11.
Начальным текущим месяцем считается январь.
Количества дней в месяцах соответствуют Григорианскому календарю с той лишь разницей, 
что в феврале всегда 28 дней.
Формат ввода
Сначала число операций Q, затем описания операций.
Названия дел s уникальны и состоят только из латинских букв, цифр 
и символов подчёркивания. Номера дней i являются целыми числами 
и нумеруются от 1 до размера текущего месяца.

Формат вывода
Для каждой операции типа DUMP в отдельной строке выведите количество дел 
в соответствующий день, а затем их названия, разделяя их пробелом. 
Порядок вывода дел в рамках каждой операции значения не имеет.

Пример
Ввод
12
ADD 5 Salary
ADD 31 Walk
ADD 30 WalkPreparations
NEXT
DUMP 5
DUMP 28
NEXT
DUMP 31
DUMP 30
DUMP 28
ADD 28 Payment
DUMP 28
Вывод
1 Salary
2 WalkPreparations Walk
0
0
2 WalkPreparations Walk
3 WalkPreparations Walk Payment
Указание
Для дописывания всех элементов вектора v2 в конец вектора v1 удобно использовать метод insert:

v1.insert(end(v1), begin(v2), end(v2));
Кроме того, элементом вектора может быть любой тип, в том числе и другой вектор. 
Например, vector<vector> — это вектор, элементами которого являются вектора целых чисел 
(то есть двумерный массив). Пример использования:

vector<vector<int>> m(10); // Создаём вектор из десяти векторов целых чисел
m[0].push_back(5);  // Добавляем элементы в первый вектор
m[0].push_back(15);
cout << m[0][1]; // Выведет 15 — второй элемент первого вектора

m[1].push_back(3);
for (int x : m[1]) {
    // Перебираем все элементы второго
}
*/
//*******************************************************************
//*******************************************************************

#include <iostream>
#include <vector>
using namespace std;

void DisplayVector(vector<int> vec) {
	for (auto str : vec) {
		cout << str << " ";
	}
}

int main() {

    const vector<int> days_in_month = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    const int month_count = days_in_month.size();

    // номер текущего месяца (от 0 до 11)
    int month = 0;

    // внешний вектор должен иметь длину, равную количеству дней в первом месяце;
    // все внутренние векторы по умолчанию пусты, потому что дел изначально нет
    vector<vector<string>> days_concerns(days_in_month[month]);
    
    int q = 0;
    cin >> q;

    for (int i = 0; i < q; i++) {
        string operation;
        cin >> operation;

        if (operation == "ADD") {
            int day = 0;
            cin >> day;

            string concern;
            cin >> concern;

            days_concerns[--day].push_back(concern);    // --day элементы вектора нумеруются с нуля
        }

        else if (operation == "NEXT") {
            
            // перед переходом к следующему месяцу запомним длину предыдущего
            // обьявляем эту переменную константной, потому что менять её не планируем
            const int old_month_lng = days_in_month[month];

            // номер месяца должен увеличиться на 1, но после декабря идёт январь:
            // например, (5 + 1) % 12 = 6, но (11 + 1) % 12 = 0
            month = (month + 1) % month_count;

            const int new_month_lng = days_in_month[month];

            // если новый месяц больше предыдущего, достаточно сделать resize;
            // иначе перед resize надо переместить дела с «лишних» последних дней
            if (new_month_lng < old_month_lng) {
                
                // далее понадобится добавлять новые дела в последний день нового месяца
                // чтобы не писать несколько раз days_concerns[new_month_length - 1],
                // создадим ссылку с более коротким названием для этого вектора
                vector<string>& last_day_concerns = days_concerns[new_month_lng - 1];
                
                // перебираем все «лишние» дни в конце месяца
                for (int i = new_month_lng; i < old_month_lng; i++) {
                    
                    // копируем вектор days_concerns[day]
                    // в конец вектора last_day_concerns
                    last_day_concerns.insert(last_day_concerns.end(), days_concerns[i].begin(), days_concerns[i].end());
                }
            }
            days_concerns.resize(new_month_lng);
        }

        else if (operation == "DUMP") {
            int day = 0;
            cin >> day;

            // выводим список дел в конкретный день в нужном формате
            cout << days_concerns[--day].size() << " ";
            for (const string concern : days_concerns[day]) {
                cout << concern << " ";
            }
            cout << endl;
        }
    }

    return 0;
}
